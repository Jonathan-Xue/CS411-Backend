# TODO import code from data/prof-course-matching.ipynb to main endpoint code in flask
# the following two endpoints are not implemented into flask yet (in jupyter notebook code though)

GET /matches/course/<courseNo>/<courseName>
all params required in url,
response format (example):
{
  "data": [
    {
      'instructorId':       115,
      'instructorName':     'Craig Zilles',
      'researchInterests':  'Learning Analytics, Pedagogy, Computer-Based Testing, Assessment, Asynchronous Exams, Item Generation, Concept Inventories, Plagiarism Detection',
      'score':              1.0
    },
    {...}
}

GET /matches/instructor/<instructorId>
all params required in url,
response format (example):
{
  "data": [
    {
      'courseDesc': 'Fundamental principles of computer and communications security and information assurance: ethics, privacy, notions of threat, vulnerabilities, and risk in systems, information warfare, malicious software, data secrecy and integrity issues, network security, trusted computing, mandatory and discretionary access controls, certification and accreditation of systems against security standards. Security mechanisms: authentication, auditing, intrusion detection, access control, cryptography, security protocols, key distribution. ',
      'courseName': 'Computer Security I',
      'courseNo': 461,
      'score': 0.9258387932675674
    },
    {...}
  ]
}

---

GET /entries:
no params,

POST /entries
request body (all fields required):
{
  courseNo: [int],
  courseName: [string],
  year: [int],
  term: [string,
  primaryInstructor: [int],
  aPlus: [int],
  a: [int],
  aMinus: [int],
  bPlus: [int],
  b: [int],
  bMinus: [int],
  cPlus: [int],
  c: [int],
  cMinus: [int],
  dPlus: [int],
  d: [int],
  dMinus: [int],
  f: [int]
}
*primaryInstructor must be a valid insturctorId (unsigned int) that exists in the csInstructor table

DELETE /entries/<courseNo>/<courseName>/<year>/<term>/<primaryInstructor>
all params required in url (as all of them make up the primary key)

---

GET /courses
no params

POST /courses
request body (all fields required):
{
  courseNo: [int],
  courseName: [string],
  courseDesc: [string],
}
*(courseNo, courseName) must be a valid course in csCourse

PUT /courses/<courseNo>/<courseName>
all params required in url (as all of them make up the primary key),
request body (all fields required):
{
  courseDesc: [string],
}
*only the courseDesc field for a course can be updated

DELETE /courses/<courseNo>/<courseName>
all params required in url (as all of them make up the primary key)

---

GET /instructors
no params

POST /instructors
request body (all fields required):
{
  instructorName: [string],
  researchInterests: [string]
}
*researchInterests should be a comma-separated string of research interest phrases/words.

PUT /instructors/<instructorId>
all params required in url (as instructorId is the primary key),
request body (all fields required):
{
  researchInterests: [string],
}
*researchInterests should be a comma-separated string of research interest phrases/words.

DELETE /instructors/<instructorId>
all params required in url (as instructorId is the primary key)
